// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Infrastructure.Data;

#nullable disable

namespace SchoolWebApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250510043230_added TimeIn and TimeOut on entity Attendance")]
    partial class addedTimeInandTimeOutonentityAttendance
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7e67d486-af3e-49f1-a109-a2b864b8e0ec",
                            RoleId = "717d9b15-a428-440c-b26b-08d3bbb68b02"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.Curriculum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Curricula");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.EducationLevelSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("EducationLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("SubjectId");

                    b.ToTable("EducationLevelSubjects");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("ContributingMark")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("ExamEndDate")
                        .HasColumnType("date");

                    b.Property<float>("ExamMark")
                        .HasColumnType("float");

                    b.Property<DateOnly>("ExamMarkEntryEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ExamStartDate")
                        .HasColumnType("date");

                    b.Property<int>("ExamTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("longtext");

                    b.Property<int>("SchoolClassId")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("SchoolClassId");

                    b.HasIndex("SessionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.ExamResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<float>("Score")
                        .HasColumnType("float");

                    b.Property<int>("StudentSubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentSubjectId");

                    b.ToTable("ExamResults");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.ExamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Featured")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ExamTypes");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<float>("MaxScore")
                        .HasColumnType("float");

                    b.Property<float>("MinScore")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<float>("Points")
                        .HasColumnType("float");

                    b.Property<string>("RemarksEng")
                        .HasColumnType("longtext");

                    b.Property<string>("RemarksSwa")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NumOfLessons")
                        .HasColumnType("int");

                    b.Property<bool>("Optional")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("StaffDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StaffDetailsId");

                    b.HasIndex("SubjectGroupId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.SubjectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.ToTable("SubjectGroups");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Class.ClassLeadershipRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PersonType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClassLeadershipRoles");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Class.LearningLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("EducationLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationLevelId");

                    b.ToTable("LearningLevels");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Class.SchoolClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("LearningLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("SchoolStreamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("LearningLevelId");

                    b.HasIndex("SchoolStreamId");

                    b.ToTable("SchoolClasses");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Class.SchoolClassLeaders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassLeadershipRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SchoolClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassLeadershipRoleId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SchoolClassId");

                    b.ToTable("SchoolClassLeaders");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Class.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SessionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("SessionTypeId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "717d9b15-a428-440c-b26b-08d3bbb68b02",
                            Created = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(1560),
                            CreatedBy = "admin",
                            Modified = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(1598),
                            ModifiedBy = "admin",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "95ed2407-3e58-4af2-88a4-1c4e96473f68",
                            Created = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(1673),
                            CreatedBy = "admin",
                            Modified = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(1675),
                            ModifiedBy = "admin",
                            Name = "HeadTeacher",
                            NormalizedName = "HEADTEACHER"
                        },
                        new
                        {
                            Id = "48c50c3a-9958-453b-b649-4e21af131322",
                            Created = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(1714),
                            CreatedBy = "admin",
                            Modified = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(1716),
                            ModifiedBy = "admin",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "448df289-142c-4959-a912-60733515e1b4",
                            Created = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(1754),
                            CreatedBy = "admin",
                            Modified = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(1756),
                            ModifiedBy = "admin",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "269f0cf3-405e-4163-83f3-1b63ebebd62e",
                            Created = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(1794),
                            CreatedBy = "admin",
                            Modified = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(1812),
                            ModifiedBy = "admin",
                            Name = "Parent",
                            NormalizedName = "PARENT"
                        },
                        new
                        {
                            Id = "cd12b44b-103b-48df-8887-a2bf42e0651e",
                            Created = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(1864),
                            CreatedBy = "admin",
                            Modified = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(1868),
                            ModifiedBy = "admin",
                            Name = "Accounts",
                            NormalizedName = "ACCOUNTS"
                        },
                        new
                        {
                            Id = "97942bee-ef12-4425-8225-4f293d0f36dd",
                            Created = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(1904),
                            CreatedBy = "admin",
                            Modified = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(1906),
                            ModifiedBy = "admin",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        });
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PersonId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7e67d486-af3e-49f1-a109-a2b864b8e0ec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ce54d61-669f-4290-9735-45ce5ac22729",
                            Created = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(2212),
                            CreatedBy = "admin",
                            Email = "admin@kodetek.co.ke",
                            EmailConfirmed = true,
                            FirstName = "SchoolSoft",
                            LastName = "Administrator",
                            LockoutEnabled = false,
                            Modified = new DateTime(2025, 5, 10, 7, 32, 26, 864, DateTimeKind.Local).AddTicks(2215),
                            ModifiedBy = "admin",
                            NormalizedEmail = "ADMIN@KODETEK.CO.KE",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELMUZ/rCv/BSX/7yEkvbrD4LjVPQj7n+B0PXtFZ7YCxS21h45FGYk2N/lYSM6L8Qtg==",
                            PersonId = 5,
                            PhoneNumber = "+254724920000",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5787c3a8-2423-4763-95eb-377b2ec0ee0c",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("StaffDetailsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffDetailsId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.EducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbr")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("EducationLevelTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NumOfYears")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("EducationLevelTypeId");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.EducationLevelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbr")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("EducationLevelTypes");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EventLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.LearningMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("LearningModes");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.SchoolDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("JuniorSchool")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LogoAsBase64")
                        .HasColumnType("longtext");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("LowerPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Mission")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Motto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OtherDetails")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("PrePrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ReportHeader")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReportSubTitle")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReportTitle")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReportTitleDetails")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("SeniorSchool")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("UpperPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Vision")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("SchoolDetails");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.SchoolStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SchoolStreams");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.ToDoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CompleteBy")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Completed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("StaffDetailsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffDetailsId");

                    b.ToTable("ToDoLists");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.EmploymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("EmploymentTypes");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.OccurenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("OccurenceTypes");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.Outcome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Outcomes");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.RelationShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("RelationShips");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.SessionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("SessionTypes");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.StaffCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("StaffCategories");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Shared.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OccurenceDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("OccurenceEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("OccurenceStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OccurenceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("OutcomeDetails")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("OutcomeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OccurenceTypeId");

                    b.HasIndex("OutcomeId");

                    b.ToTable("Discipline");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Discipline");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Shared.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.Property<string>("StaffImageAsBase64")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UPI")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ReligionId");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Staff.StaffAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Present")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("StaffDetailsId")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("TimeIn")
                        .HasColumnType("time(6)");

                    b.Property<TimeOnly?>("TimeOut")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("StaffDetailsId");

                    b.ToTable("StaffAttendances");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Staff.StaffSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SchoolClassId")
                        .HasColumnType("int");

                    b.Property<int>("StaffDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolClassId");

                    b.HasIndex("StaffDetailsId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StaffSubjects");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.FormerSchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClassDetails")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("EducationLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Position")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Score")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("StudentId");

                    b.ToTable("FormerSchools");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.StudentAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Present")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("TimeIn")
                        .HasColumnType("time(6)");

                    b.Property<TimeOnly?>("TimeOut")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("StudentClassId");

                    b.ToTable("StudentAttendances");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.StudentClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SchoolClassId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClasses");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.StudentParent", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("longtext");

                    b.Property<int>("RelationShipId")
                        .HasColumnType("int");

                    b.HasKey("ParentId", "StudentId");

                    b.HasIndex("RelationShipId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentParents");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.StudentSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentClassId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StudentSubjects");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Staff.StaffDiscipline", b =>
                {
                    b.HasBaseType("SchoolWebApp.Core.Entities.Shared.Discipline");

                    b.Property<int>("StaffDetailsId")
                        .HasColumnType("int");

                    b.HasIndex("StaffDetailsId");

                    b.HasDiscriminator().HasValue("StaffDiscipline");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.StudentDiscipline", b =>
                {
                    b.HasBaseType("SchoolWebApp.Core.Entities.Shared.Discipline");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("StudentDiscipline");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Staff.StaffDetails", b =>
                {
                    b.HasBaseType("SchoolWebApp.Core.Entities.Shared.Person");

                    b.Property<bool>("CurrentlyEmployed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EmploymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmploymentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndofEmploymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("KraPinNo")
                        .HasColumnType("longtext");

                    b.Property<string>("NhifNo")
                        .HasColumnType("longtext");

                    b.Property<string>("NssfNo")
                        .HasColumnType("longtext");

                    b.Property<int>("StaffCategoryId")
                        .HasColumnType("int");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("StaffCategoryId");

                    b.HasDiscriminator().HasValue("StaffDetails");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.Parent", b =>
                {
                    b.HasBaseType("SchoolWebApp.Core.Entities.Shared.Person");

                    b.Property<bool>("Notifiable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OccupationId")
                        .HasColumnType("int");

                    b.Property<bool>("Payer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Pickup")
                        .HasColumnType("tinyint(1)");

                    b.HasIndex("OccupationId");

                    b.HasDiscriminator().HasValue("Parent");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.Student", b =>
                {
                    b.HasBaseType("SchoolWebApp.Core.Entities.Shared.Person");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HealthConcerns")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("LearningModeId")
                        .HasColumnType("int");

                    b.HasIndex("LearningModeId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.EducationLevelSubject", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Academics.AcademicYear", "AcademicYear")
                        .WithMany("educationLevelSubjects")
                        .HasForeignKey("AcademicYearId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.School.EducationLevel", "EducationLevel")
                        .WithMany("educationLevelSubjects")
                        .HasForeignKey("EducationLevelId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Academics.Subject", "Subject")
                        .WithMany("educationLevelSubjects")
                        .HasForeignKey("SubjectId")
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("EducationLevel");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.Exam", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Academics.ExamType", "ExamType")
                        .WithMany("Exams")
                        .HasForeignKey("ExamTypeId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Class.SchoolClass", "SchoolClass")
                        .WithMany("Exams")
                        .HasForeignKey("SchoolClassId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Class.Session", "Session")
                        .WithMany("Exams")
                        .HasForeignKey("SessionId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Academics.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .IsRequired();

                    b.Navigation("ExamType");

                    b.Navigation("SchoolClass");

                    b.Navigation("Session");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.ExamResult", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Academics.Exam", "Exam")
                        .WithMany("ExamResults")
                        .HasForeignKey("ExamId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Students.StudentSubject", "StudentSubject")
                        .WithMany("ExamResults")
                        .HasForeignKey("StudentSubjectId")
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("StudentSubject");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.Grade", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Academics.Curriculum", "Curriculum")
                        .WithMany("Grades")
                        .HasForeignKey("CurriculumId")
                        .IsRequired();

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.Subject", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.School.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Staff.StaffDetails", "StaffDetails")
                        .WithMany("Subjects")
                        .HasForeignKey("StaffDetailsId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Academics.SubjectGroup", "SubjectGroup")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectGroupId")
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("StaffDetails");

                    b.Navigation("SubjectGroup");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.SubjectGroup", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Academics.Curriculum", "Curriculum")
                        .WithMany("SubjectGroups")
                        .HasForeignKey("CurriculumId")
                        .IsRequired();

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Class.LearningLevel", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.School.EducationLevel", "EducationLevel")
                        .WithMany("LearningLevels")
                        .HasForeignKey("EducationLevelId")
                        .IsRequired();

                    b.Navigation("EducationLevel");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Class.SchoolClass", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Academics.AcademicYear", "AcademicYear")
                        .WithMany("SchoolClasses")
                        .HasForeignKey("AcademicYearId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Class.LearningLevel", "LearningLevel")
                        .WithMany("SchoolClasses")
                        .HasForeignKey("LearningLevelId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.School.SchoolStream", "SchoolStream")
                        .WithMany("SchoolClasses")
                        .HasForeignKey("SchoolStreamId")
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("LearningLevel");

                    b.Navigation("SchoolStream");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Class.SchoolClassLeaders", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Class.ClassLeadershipRole", "ClassLeadershipRole")
                        .WithMany("SchoolClassLeaders")
                        .HasForeignKey("ClassLeadershipRoleId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Shared.Person", "Person")
                        .WithMany("SchoolClassLeaders")
                        .HasForeignKey("PersonId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Class.SchoolClass", "SchoolClass")
                        .WithMany("SchoolClassLeaders")
                        .HasForeignKey("SchoolClassId")
                        .IsRequired();

                    b.Navigation("ClassLeadershipRole");

                    b.Navigation("Person");

                    b.Navigation("SchoolClass");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Class.Session", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Academics.AcademicYear", "AcademicYear")
                        .WithMany("Sessions")
                        .HasForeignKey("AcademicYearId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Academics.Curriculum", "Curriculum")
                        .WithMany("Sessions")
                        .HasForeignKey("CurriculumId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Settings.SessionType", "SessionType")
                        .WithMany("Sessions")
                        .HasForeignKey("SessionTypeId")
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Curriculum");

                    b.Navigation("SessionType");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Identity.AppUser", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Shared.Person", "Person")
                        .WithMany("AppUsers")
                        .HasForeignKey("PersonId")
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.Department", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Staff.StaffDetails", "StaffDetails")
                        .WithMany("Departments")
                        .HasForeignKey("StaffDetailsId")
                        .IsRequired();

                    b.Navigation("StaffDetails");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.EducationLevel", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Academics.Curriculum", "Curriculum")
                        .WithMany("EducationLevels")
                        .HasForeignKey("CurriculumId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.School.EducationLevelType", "EducationLevelType")
                        .WithMany("EducationLevels")
                        .HasForeignKey("EducationLevelTypeId")
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("EducationLevelType");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.Event", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Class.Session", "Session")
                        .WithMany("Events")
                        .HasForeignKey("SessionId")
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.ToDoList", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Staff.StaffDetails", "StaffDetails")
                        .WithMany("ToDoLists")
                        .HasForeignKey("StaffDetailsId")
                        .IsRequired();

                    b.Navigation("StaffDetails");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Shared.Discipline", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Settings.OccurenceType", "OccurenceType")
                        .WithMany("Disciplines")
                        .HasForeignKey("OccurenceTypeId");

                    b.HasOne("SchoolWebApp.Core.Entities.Settings.Outcome", "Outcome")
                        .WithMany("Disciplines")
                        .HasForeignKey("OutcomeId");

                    b.Navigation("OccurenceType");

                    b.Navigation("Outcome");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Shared.Person", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Settings.Gender", "Gender")
                        .WithMany("People")
                        .HasForeignKey("GenderId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Settings.Nationality", "Nationality")
                        .WithMany("People")
                        .HasForeignKey("NationalityId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Settings.Religion", "Religion")
                        .WithMany("People")
                        .HasForeignKey("ReligionId")
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Nationality");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Staff.StaffAttendance", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Staff.StaffDetails", "StaffDetails")
                        .WithMany("StaffAttendances")
                        .HasForeignKey("StaffDetailsId")
                        .IsRequired();

                    b.Navigation("StaffDetails");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Staff.StaffSubject", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Class.SchoolClass", "SchoolClass")
                        .WithMany("StaffSubjects")
                        .HasForeignKey("SchoolClassId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Staff.StaffDetails", "StaffDetails")
                        .WithMany("StaffSubjects")
                        .HasForeignKey("StaffDetailsId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Academics.Subject", "Subject")
                        .WithMany("StaffSubjects")
                        .HasForeignKey("SubjectId")
                        .IsRequired();

                    b.Navigation("SchoolClass");

                    b.Navigation("StaffDetails");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.FormerSchool", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Academics.Curriculum", "Curriculum")
                        .WithMany("FormerSchools")
                        .HasForeignKey("CurriculumId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.School.EducationLevel", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Students.Student", "Student")
                        .WithMany("FormerSchools")
                        .HasForeignKey("StudentId")
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("EducationLevel");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.StudentAttendance", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Students.StudentClass", "StudentClass")
                        .WithMany("StudentAttendances")
                        .HasForeignKey("StudentClassId")
                        .IsRequired();

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.StudentClass", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Class.SchoolClass", "SchoolClass")
                        .WithMany("StudentClasses")
                        .HasForeignKey("SchoolClassId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Students.Student", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .IsRequired();

                    b.Navigation("SchoolClass");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.StudentParent", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Students.Parent", "Parent")
                        .WithMany("StudentParents")
                        .HasForeignKey("ParentId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Settings.RelationShip", "RelationShip")
                        .WithMany("StudentParents")
                        .HasForeignKey("RelationShipId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Students.Student", "Student")
                        .WithMany("StudentParents")
                        .HasForeignKey("StudentId")
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("RelationShip");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.StudentSubject", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Students.StudentClass", "StudentClass")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("StudentClassId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Academics.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("SubjectId")
                        .IsRequired();

                    b.Navigation("StudentClass");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Staff.StaffDiscipline", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Staff.StaffDetails", "StaffDetails")
                        .WithMany("StaffDisciplines")
                        .HasForeignKey("StaffDetailsId")
                        .IsRequired();

                    b.Navigation("StaffDetails");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.StudentDiscipline", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Students.Student", "Student")
                        .WithMany("StudentDisciplines")
                        .HasForeignKey("StudentId")
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Staff.StaffDetails", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Settings.Designation", "Designation")
                        .WithMany("StaffDetails")
                        .HasForeignKey("DesignationId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Settings.EmploymentType", "EmploymentType")
                        .WithMany("StaffDetails")
                        .HasForeignKey("EmploymentTypeId")
                        .IsRequired();

                    b.HasOne("SchoolWebApp.Core.Entities.Settings.StaffCategory", "StaffCategory")
                        .WithMany("StaffDetails")
                        .HasForeignKey("StaffCategoryId")
                        .IsRequired();

                    b.Navigation("Designation");

                    b.Navigation("EmploymentType");

                    b.Navigation("StaffCategory");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.Parent", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.Settings.Occupation", "Occupation")
                        .WithMany("Parents")
                        .HasForeignKey("OccupationId")
                        .IsRequired();

                    b.Navigation("Occupation");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.Student", b =>
                {
                    b.HasOne("SchoolWebApp.Core.Entities.School.LearningMode", "LearningMode")
                        .WithMany("Students")
                        .HasForeignKey("LearningModeId")
                        .IsRequired();

                    b.Navigation("LearningMode");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.AcademicYear", b =>
                {
                    b.Navigation("SchoolClasses");

                    b.Navigation("Sessions");

                    b.Navigation("educationLevelSubjects");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.Curriculum", b =>
                {
                    b.Navigation("EducationLevels");

                    b.Navigation("FormerSchools");

                    b.Navigation("Grades");

                    b.Navigation("Sessions");

                    b.Navigation("SubjectGroups");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.Exam", b =>
                {
                    b.Navigation("ExamResults");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.ExamType", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.Subject", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("StaffSubjects");

                    b.Navigation("StudentSubjects");

                    b.Navigation("educationLevelSubjects");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Academics.SubjectGroup", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Class.ClassLeadershipRole", b =>
                {
                    b.Navigation("SchoolClassLeaders");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Class.LearningLevel", b =>
                {
                    b.Navigation("SchoolClasses");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Class.SchoolClass", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("SchoolClassLeaders");

                    b.Navigation("StaffSubjects");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Class.Session", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.Department", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.EducationLevel", b =>
                {
                    b.Navigation("LearningLevels");

                    b.Navigation("educationLevelSubjects");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.EducationLevelType", b =>
                {
                    b.Navigation("EducationLevels");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.LearningMode", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.School.SchoolStream", b =>
                {
                    b.Navigation("SchoolClasses");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.Designation", b =>
                {
                    b.Navigation("StaffDetails");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.EmploymentType", b =>
                {
                    b.Navigation("StaffDetails");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.Gender", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.Nationality", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.Occupation", b =>
                {
                    b.Navigation("Parents");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.OccurenceType", b =>
                {
                    b.Navigation("Disciplines");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.Outcome", b =>
                {
                    b.Navigation("Disciplines");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.RelationShip", b =>
                {
                    b.Navigation("StudentParents");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.Religion", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.SessionType", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Settings.StaffCategory", b =>
                {
                    b.Navigation("StaffDetails");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Shared.Person", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("SchoolClassLeaders");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.StudentClass", b =>
                {
                    b.Navigation("StudentAttendances");

                    b.Navigation("StudentSubjects");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.StudentSubject", b =>
                {
                    b.Navigation("ExamResults");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Staff.StaffDetails", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("StaffAttendances");

                    b.Navigation("StaffDisciplines");

                    b.Navigation("StaffSubjects");

                    b.Navigation("Subjects");

                    b.Navigation("ToDoLists");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.Parent", b =>
                {
                    b.Navigation("StudentParents");
                });

            modelBuilder.Entity("SchoolWebApp.Core.Entities.Students.Student", b =>
                {
                    b.Navigation("FormerSchools");

                    b.Navigation("StudentClasses");

                    b.Navigation("StudentDisciplines");

                    b.Navigation("StudentParents");
                });
#pragma warning restore 612, 618
        }
    }
}
